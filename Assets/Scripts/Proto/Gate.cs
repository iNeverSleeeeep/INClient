// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gate.proto</summary>
public static partial class GateReflection {

  #region Descriptor
  /// <summary>File descriptor for gate.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GateReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpnYXRlLnByb3RvIjoKFEZvcndhcmRQbGF5ZXJNZXNzYWdlEhIKClBsYXll",
          "clVVSUQYASABKAkSDgoGQnVmZmVyGAIgASgMQhhaFklOU2VydmVyL3NyYy9w",
          "cm90by9tc2diBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ForwardPlayerMessage), global::ForwardPlayerMessage.Parser, new[]{ "PlayerUUID", "Buffer" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ForwardPlayerMessage : pb::IMessage<ForwardPlayerMessage> {
  private static readonly pb::MessageParser<ForwardPlayerMessage> _parser = new pb::MessageParser<ForwardPlayerMessage>(() => new ForwardPlayerMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ForwardPlayerMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForwardPlayerMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForwardPlayerMessage(ForwardPlayerMessage other) : this() {
    playerUUID_ = other.playerUUID_;
    buffer_ = other.buffer_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForwardPlayerMessage Clone() {
    return new ForwardPlayerMessage(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Buffer" field.</summary>
  public const int BufferFieldNumber = 2;
  private pb::ByteString buffer_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Buffer {
    get { return buffer_; }
    set {
      buffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ForwardPlayerMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ForwardPlayerMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    if (Buffer != other.Buffer) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (Buffer.Length != 0) hash ^= Buffer.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (Buffer.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Buffer);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (Buffer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buffer);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ForwardPlayerMessage other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    if (other.Buffer.Length != 0) {
      Buffer = other.Buffer;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
        case 18: {
          Buffer = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
