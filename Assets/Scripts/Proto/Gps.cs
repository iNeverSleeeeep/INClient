// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gps.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gps.proto</summary>
public static partial class GpsReflection {

  #region Descriptor
  /// <summary>File descriptor for gps.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GpsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CglncHMucHJvdG8aDHBsYXllci5wcm90byJtCgVUaGluZxIOCgZCdWZmZXIY",
          "ASABKAwSFAoMVG9QbGF5ZXJVVUlEGAIgASgJEhEKCVRvV29ybGRJRBgDIAEo",
          "BRIRCglUb01hcFVVSUQYBCABKAUSGAoQVG9QbGF5ZXJVVUlETGlzdBgFIAMo",
          "CSJfChZVcGRhdGVQbGF5ZXJBZGRyZXNzTlRGEhIKClBsYXllclVVSUQYASAB",
          "KAkSEAoIUm9sZVVVSUQYAiABKAkSHwoHQWRkcmVzcxgDIAEoCzIOLlBsYXll",
          "ckFkZHJlc3MiLAoWUmVtb3ZlUGxheWVyQWRkcmVzc05URhISCgpQbGF5ZXJV",
          "VUlEGAEgASgJIjgKE1VwZGF0ZU1hcEFkZHJlc3NOVEYSDwoHTWFwVVVJRBgB",
          "IAEoCRIQCghTZXJ2ZXJJRBgCIAEoBSImChNSZW1vdmVNYXBBZGRyZXNzTlRG",
          "Eg8KB01hcFVVSUQYASABKAkiIwoQR2V0TWFwQWRkcmVzc1JlcRIPCgdNYXBV",
          "VUlEGAEgASgJIiUKEUdldE1hcEFkZHJlc3NSZXNwEhAKCFNlcnZlcklEGAEg",
          "ASgFQhhaFklOU2VydmVyL3NyYy9wcm90by9tc2diBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::PlayerReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Thing), global::Thing.Parser, new[]{ "Buffer", "ToPlayerUUID", "ToWorldID", "ToMapUUID", "ToPlayerUUIDList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdatePlayerAddressNTF), global::UpdatePlayerAddressNTF.Parser, new[]{ "PlayerUUID", "RoleUUID", "Address" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemovePlayerAddressNTF), global::RemovePlayerAddressNTF.Parser, new[]{ "PlayerUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateMapAddressNTF), global::UpdateMapAddressNTF.Parser, new[]{ "MapUUID", "ServerID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoveMapAddressNTF), global::RemoveMapAddressNTF.Parser, new[]{ "MapUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetMapAddressReq), global::GetMapAddressReq.Parser, new[]{ "MapUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetMapAddressResp), global::GetMapAddressResp.Parser, new[]{ "ServerID" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Thing : pb::IMessage<Thing> {
  private static readonly pb::MessageParser<Thing> _parser = new pb::MessageParser<Thing>(() => new Thing());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Thing> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Thing() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Thing(Thing other) : this() {
    buffer_ = other.buffer_;
    toPlayerUUID_ = other.toPlayerUUID_;
    toWorldID_ = other.toWorldID_;
    toMapUUID_ = other.toMapUUID_;
    toPlayerUUIDList_ = other.toPlayerUUIDList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Thing Clone() {
    return new Thing(this);
  }

  /// <summary>Field number for the "Buffer" field.</summary>
  public const int BufferFieldNumber = 1;
  private pb::ByteString buffer_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Buffer {
    get { return buffer_; }
    set {
      buffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ToPlayerUUID" field.</summary>
  public const int ToPlayerUUIDFieldNumber = 2;
  private string toPlayerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ToPlayerUUID {
    get { return toPlayerUUID_; }
    set {
      toPlayerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ToWorldID" field.</summary>
  public const int ToWorldIDFieldNumber = 3;
  private int toWorldID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToWorldID {
    get { return toWorldID_; }
    set {
      toWorldID_ = value;
    }
  }

  /// <summary>Field number for the "ToMapUUID" field.</summary>
  public const int ToMapUUIDFieldNumber = 4;
  private int toMapUUID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ToMapUUID {
    get { return toMapUUID_; }
    set {
      toMapUUID_ = value;
    }
  }

  /// <summary>Field number for the "ToPlayerUUIDList" field.</summary>
  public const int ToPlayerUUIDListFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_toPlayerUUIDList_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> toPlayerUUIDList_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> ToPlayerUUIDList {
    get { return toPlayerUUIDList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Thing);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Thing other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Buffer != other.Buffer) return false;
    if (ToPlayerUUID != other.ToPlayerUUID) return false;
    if (ToWorldID != other.ToWorldID) return false;
    if (ToMapUUID != other.ToMapUUID) return false;
    if(!toPlayerUUIDList_.Equals(other.toPlayerUUIDList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Buffer.Length != 0) hash ^= Buffer.GetHashCode();
    if (ToPlayerUUID.Length != 0) hash ^= ToPlayerUUID.GetHashCode();
    if (ToWorldID != 0) hash ^= ToWorldID.GetHashCode();
    if (ToMapUUID != 0) hash ^= ToMapUUID.GetHashCode();
    hash ^= toPlayerUUIDList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Buffer.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Buffer);
    }
    if (ToPlayerUUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ToPlayerUUID);
    }
    if (ToWorldID != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(ToWorldID);
    }
    if (ToMapUUID != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(ToMapUUID);
    }
    toPlayerUUIDList_.WriteTo(output, _repeated_toPlayerUUIDList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Buffer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buffer);
    }
    if (ToPlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ToPlayerUUID);
    }
    if (ToWorldID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToWorldID);
    }
    if (ToMapUUID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToMapUUID);
    }
    size += toPlayerUUIDList_.CalculateSize(_repeated_toPlayerUUIDList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Thing other) {
    if (other == null) {
      return;
    }
    if (other.Buffer.Length != 0) {
      Buffer = other.Buffer;
    }
    if (other.ToPlayerUUID.Length != 0) {
      ToPlayerUUID = other.ToPlayerUUID;
    }
    if (other.ToWorldID != 0) {
      ToWorldID = other.ToWorldID;
    }
    if (other.ToMapUUID != 0) {
      ToMapUUID = other.ToMapUUID;
    }
    toPlayerUUIDList_.Add(other.toPlayerUUIDList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Buffer = input.ReadBytes();
          break;
        }
        case 18: {
          ToPlayerUUID = input.ReadString();
          break;
        }
        case 24: {
          ToWorldID = input.ReadInt32();
          break;
        }
        case 32: {
          ToMapUUID = input.ReadInt32();
          break;
        }
        case 42: {
          toPlayerUUIDList_.AddEntriesFrom(input, _repeated_toPlayerUUIDList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class UpdatePlayerAddressNTF : pb::IMessage<UpdatePlayerAddressNTF> {
  private static readonly pb::MessageParser<UpdatePlayerAddressNTF> _parser = new pb::MessageParser<UpdatePlayerAddressNTF>(() => new UpdatePlayerAddressNTF());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdatePlayerAddressNTF> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdatePlayerAddressNTF() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdatePlayerAddressNTF(UpdatePlayerAddressNTF other) : this() {
    playerUUID_ = other.playerUUID_;
    roleUUID_ = other.roleUUID_;
    address_ = other.address_ != null ? other.address_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdatePlayerAddressNTF Clone() {
    return new UpdatePlayerAddressNTF(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoleUUID" field.</summary>
  public const int RoleUUIDFieldNumber = 2;
  private string roleUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoleUUID {
    get { return roleUUID_; }
    set {
      roleUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Address" field.</summary>
  public const int AddressFieldNumber = 3;
  private global::PlayerAddress address_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerAddress Address {
    get { return address_; }
    set {
      address_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdatePlayerAddressNTF);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdatePlayerAddressNTF other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    if (RoleUUID != other.RoleUUID) return false;
    if (!object.Equals(Address, other.Address)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (RoleUUID.Length != 0) hash ^= RoleUUID.GetHashCode();
    if (address_ != null) hash ^= Address.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (RoleUUID.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RoleUUID);
    }
    if (address_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Address);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (RoleUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleUUID);
    }
    if (address_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdatePlayerAddressNTF other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    if (other.RoleUUID.Length != 0) {
      RoleUUID = other.RoleUUID;
    }
    if (other.address_ != null) {
      if (address_ == null) {
        Address = new global::PlayerAddress();
      }
      Address.MergeFrom(other.Address);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
        case 18: {
          RoleUUID = input.ReadString();
          break;
        }
        case 26: {
          if (address_ == null) {
            Address = new global::PlayerAddress();
          }
          input.ReadMessage(Address);
          break;
        }
      }
    }
  }

}

public sealed partial class RemovePlayerAddressNTF : pb::IMessage<RemovePlayerAddressNTF> {
  private static readonly pb::MessageParser<RemovePlayerAddressNTF> _parser = new pb::MessageParser<RemovePlayerAddressNTF>(() => new RemovePlayerAddressNTF());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemovePlayerAddressNTF> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemovePlayerAddressNTF() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemovePlayerAddressNTF(RemovePlayerAddressNTF other) : this() {
    playerUUID_ = other.playerUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemovePlayerAddressNTF Clone() {
    return new RemovePlayerAddressNTF(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemovePlayerAddressNTF);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemovePlayerAddressNTF other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemovePlayerAddressNTF other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateMapAddressNTF : pb::IMessage<UpdateMapAddressNTF> {
  private static readonly pb::MessageParser<UpdateMapAddressNTF> _parser = new pb::MessageParser<UpdateMapAddressNTF>(() => new UpdateMapAddressNTF());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateMapAddressNTF> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateMapAddressNTF() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateMapAddressNTF(UpdateMapAddressNTF other) : this() {
    mapUUID_ = other.mapUUID_;
    serverID_ = other.serverID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateMapAddressNTF Clone() {
    return new UpdateMapAddressNTF(this);
  }

  /// <summary>Field number for the "MapUUID" field.</summary>
  public const int MapUUIDFieldNumber = 1;
  private string mapUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapUUID {
    get { return mapUUID_; }
    set {
      mapUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ServerID" field.</summary>
  public const int ServerIDFieldNumber = 2;
  private int serverID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerID {
    get { return serverID_; }
    set {
      serverID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateMapAddressNTF);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateMapAddressNTF other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MapUUID != other.MapUUID) return false;
    if (ServerID != other.ServerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MapUUID.Length != 0) hash ^= MapUUID.GetHashCode();
    if (ServerID != 0) hash ^= ServerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MapUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MapUUID);
    }
    if (ServerID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(ServerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MapUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapUUID);
    }
    if (ServerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateMapAddressNTF other) {
    if (other == null) {
      return;
    }
    if (other.MapUUID.Length != 0) {
      MapUUID = other.MapUUID;
    }
    if (other.ServerID != 0) {
      ServerID = other.ServerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MapUUID = input.ReadString();
          break;
        }
        case 16: {
          ServerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RemoveMapAddressNTF : pb::IMessage<RemoveMapAddressNTF> {
  private static readonly pb::MessageParser<RemoveMapAddressNTF> _parser = new pb::MessageParser<RemoveMapAddressNTF>(() => new RemoveMapAddressNTF());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoveMapAddressNTF> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoveMapAddressNTF() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoveMapAddressNTF(RemoveMapAddressNTF other) : this() {
    mapUUID_ = other.mapUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoveMapAddressNTF Clone() {
    return new RemoveMapAddressNTF(this);
  }

  /// <summary>Field number for the "MapUUID" field.</summary>
  public const int MapUUIDFieldNumber = 1;
  private string mapUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapUUID {
    get { return mapUUID_; }
    set {
      mapUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoveMapAddressNTF);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoveMapAddressNTF other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MapUUID != other.MapUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MapUUID.Length != 0) hash ^= MapUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MapUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MapUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MapUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoveMapAddressNTF other) {
    if (other == null) {
      return;
    }
    if (other.MapUUID.Length != 0) {
      MapUUID = other.MapUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MapUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GetMapAddressReq : pb::IMessage<GetMapAddressReq> {
  private static readonly pb::MessageParser<GetMapAddressReq> _parser = new pb::MessageParser<GetMapAddressReq>(() => new GetMapAddressReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetMapAddressReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetMapAddressReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetMapAddressReq(GetMapAddressReq other) : this() {
    mapUUID_ = other.mapUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetMapAddressReq Clone() {
    return new GetMapAddressReq(this);
  }

  /// <summary>Field number for the "MapUUID" field.</summary>
  public const int MapUUIDFieldNumber = 1;
  private string mapUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapUUID {
    get { return mapUUID_; }
    set {
      mapUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetMapAddressReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetMapAddressReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MapUUID != other.MapUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MapUUID.Length != 0) hash ^= MapUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MapUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(MapUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MapUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetMapAddressReq other) {
    if (other == null) {
      return;
    }
    if (other.MapUUID.Length != 0) {
      MapUUID = other.MapUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          MapUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GetMapAddressResp : pb::IMessage<GetMapAddressResp> {
  private static readonly pb::MessageParser<GetMapAddressResp> _parser = new pb::MessageParser<GetMapAddressResp>(() => new GetMapAddressResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetMapAddressResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GpsReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetMapAddressResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetMapAddressResp(GetMapAddressResp other) : this() {
    serverID_ = other.serverID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetMapAddressResp Clone() {
    return new GetMapAddressResp(this);
  }

  /// <summary>Field number for the "ServerID" field.</summary>
  public const int ServerIDFieldNumber = 1;
  private int serverID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerID {
    get { return serverID_; }
    set {
      serverID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetMapAddressResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetMapAddressResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerID != other.ServerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ServerID != 0) hash ^= ServerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ServerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ServerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ServerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetMapAddressResp other) {
    if (other == null) {
      return;
    }
    if (other.ServerID != 0) {
      ServerID = other.ServerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ServerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
