// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: etc.database.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from etc.database.proto</summary>
public static partial class EtcDatabaseReflection {

  #region Descriptor
  /// <summary>File descriptor for etc.database.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EtcDatabaseReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChJldGMuZGF0YWJhc2UucHJvdG8ifwoIRGF0YWJhc2USCgoCSVAYASABKAkS",
          "EAoIVXNlck5hbWUYAiABKAkSEAoIUGFzc3dvcmQYAyABKAkSFwoPQ29ubk1h",
          "eExpZmV0aW1lGAQgASgDEhQKDE1heE9wZW5Db25ucxgFIAEoBRIUCgxNYXhJ",
          "ZGxlQ29ubnMYBiABKAVCGFoWSU5TZXJ2ZXIvc3JjL3Byb3RvL2V0Y2IGcHJv",
          "dG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Database), global::Database.Parser, new[]{ "IP", "UserName", "Password", "ConnMaxLifetime", "MaxOpenConns", "MaxIdleConns" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Database : pb::IMessage<Database> {
  private static readonly pb::MessageParser<Database> _parser = new pb::MessageParser<Database>(() => new Database());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Database> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EtcDatabaseReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Database() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Database(Database other) : this() {
    iP_ = other.iP_;
    userName_ = other.userName_;
    password_ = other.password_;
    connMaxLifetime_ = other.connMaxLifetime_;
    maxOpenConns_ = other.maxOpenConns_;
    maxIdleConns_ = other.maxIdleConns_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Database Clone() {
    return new Database(this);
  }

  /// <summary>Field number for the "IP" field.</summary>
  public const int IPFieldNumber = 1;
  private string iP_ = "";
  /// <summary>
  /// 数据库IP地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string IP {
    get { return iP_; }
    set {
      iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "UserName" field.</summary>
  public const int UserNameFieldNumber = 2;
  private string userName_ = "";
  /// <summary>
  /// 用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserName {
    get { return userName_; }
    set {
      userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Password" field.</summary>
  public const int PasswordFieldNumber = 3;
  private string password_ = "";
  /// <summary>
  /// 密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ConnMaxLifetime" field.</summary>
  public const int ConnMaxLifetimeFieldNumber = 4;
  private long connMaxLifetime_;
  /// <summary>
  /// 最大连接周期，超过时间的连接就close 单位秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ConnMaxLifetime {
    get { return connMaxLifetime_; }
    set {
      connMaxLifetime_ = value;
    }
  }

  /// <summary>Field number for the "MaxOpenConns" field.</summary>
  public const int MaxOpenConnsFieldNumber = 5;
  private int maxOpenConns_;
  /// <summary>
  /// 最大连接数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxOpenConns {
    get { return maxOpenConns_; }
    set {
      maxOpenConns_ = value;
    }
  }

  /// <summary>Field number for the "MaxIdleConns" field.</summary>
  public const int MaxIdleConnsFieldNumber = 6;
  private int maxIdleConns_;
  /// <summary>
  /// 闲置连接数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxIdleConns {
    get { return maxIdleConns_; }
    set {
      maxIdleConns_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Database);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Database other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (IP != other.IP) return false;
    if (UserName != other.UserName) return false;
    if (Password != other.Password) return false;
    if (ConnMaxLifetime != other.ConnMaxLifetime) return false;
    if (MaxOpenConns != other.MaxOpenConns) return false;
    if (MaxIdleConns != other.MaxIdleConns) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (IP.Length != 0) hash ^= IP.GetHashCode();
    if (UserName.Length != 0) hash ^= UserName.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (ConnMaxLifetime != 0L) hash ^= ConnMaxLifetime.GetHashCode();
    if (MaxOpenConns != 0) hash ^= MaxOpenConns.GetHashCode();
    if (MaxIdleConns != 0) hash ^= MaxIdleConns.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (IP.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(IP);
    }
    if (UserName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UserName);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Password);
    }
    if (ConnMaxLifetime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(ConnMaxLifetime);
    }
    if (MaxOpenConns != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(MaxOpenConns);
    }
    if (MaxIdleConns != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(MaxIdleConns);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (IP.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
    }
    if (UserName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (ConnMaxLifetime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConnMaxLifetime);
    }
    if (MaxOpenConns != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOpenConns);
    }
    if (MaxIdleConns != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIdleConns);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Database other) {
    if (other == null) {
      return;
    }
    if (other.IP.Length != 0) {
      IP = other.IP;
    }
    if (other.UserName.Length != 0) {
      UserName = other.UserName;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    if (other.ConnMaxLifetime != 0L) {
      ConnMaxLifetime = other.ConnMaxLifetime;
    }
    if (other.MaxOpenConns != 0) {
      MaxOpenConns = other.MaxOpenConns;
    }
    if (other.MaxIdleConns != 0) {
      MaxIdleConns = other.MaxIdleConns;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          IP = input.ReadString();
          break;
        }
        case 18: {
          UserName = input.ReadString();
          break;
        }
        case 26: {
          Password = input.ReadString();
          break;
        }
        case 32: {
          ConnMaxLifetime = input.ReadInt64();
          break;
        }
        case 40: {
          MaxOpenConns = input.ReadInt32();
          break;
        }
        case 48: {
          MaxIdleConns = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
