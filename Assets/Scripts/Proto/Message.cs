// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from message.proto</summary>
public static partial class MessageReflection {

  #region Descriptor
  /// <summary>File descriptor for message.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1tZXNzYWdlLnByb3RvGg1jb21tYW5kLnByb3RvIkoKDU1lc3NhZ2VIZWFk",
          "ZXISGQoHQ29tbWFuZBgBIAEoDjIILkNvbW1hbmQSEAoIU2VxdWVuY2UYAiAB",
          "KAQSDAoERnJvbRgDIAEoBSI5CgdNZXNzYWdlEh4KBkhlYWRlchgBIAEoCzIO",
          "Lk1lc3NhZ2VIZWFkZXISDgoGQnVmZmVyGAIgASgMIlcKB1BhY2thZ2USEAoI",
          "VW5pcXVlSUQYASABKAQSDAoERnJvbRgCIAEoBRINCgVJbmRleBgDIAEoBRIN",
          "CgVUb3RhbBgEIAEoBRIOCgZCdWZmZXIYBSABKAwiHQoJS2VlcEFsaXZlEhAK",
          "CFNlcnZlcklEGAEgASgFQhhaFklOU2VydmVyL3NyYy9wcm90by9tc2diBnBy",
          "b3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommandReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MessageHeader), global::MessageHeader.Parser, new[]{ "Command", "Sequence", "From" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Message), global::Message.Parser, new[]{ "Header", "Buffer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Package), global::Package.Parser, new[]{ "UniqueID", "From", "Index", "Total", "Buffer" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::KeepAlive), global::KeepAlive.Parser, new[]{ "ServerID" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class MessageHeader : pb::IMessage<MessageHeader> {
  private static readonly pb::MessageParser<MessageHeader> _parser = new pb::MessageParser<MessageHeader>(() => new MessageHeader());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MessageHeader> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MessageHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MessageHeader(MessageHeader other) : this() {
    command_ = other.command_;
    sequence_ = other.sequence_;
    from_ = other.from_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MessageHeader Clone() {
    return new MessageHeader(this);
  }

  /// <summary>Field number for the "Command" field.</summary>
  public const int CommandFieldNumber = 1;
  private global::Command command_ = global::Command.KeepAlive;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Command Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  /// <summary>Field number for the "Sequence" field.</summary>
  public const int SequenceFieldNumber = 2;
  private ulong sequence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Sequence {
    get { return sequence_; }
    set {
      sequence_ = value;
    }
  }

  /// <summary>Field number for the "From" field.</summary>
  public const int FromFieldNumber = 3;
  private int from_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int From {
    get { return from_; }
    set {
      from_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MessageHeader);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MessageHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    if (Sequence != other.Sequence) return false;
    if (From != other.From) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Command != global::Command.KeepAlive) hash ^= Command.GetHashCode();
    if (Sequence != 0UL) hash ^= Sequence.GetHashCode();
    if (From != 0) hash ^= From.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != global::Command.KeepAlive) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Command);
    }
    if (Sequence != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Sequence);
    }
    if (From != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(From);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Command != global::Command.KeepAlive) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    if (Sequence != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sequence);
    }
    if (From != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MessageHeader other) {
    if (other == null) {
      return;
    }
    if (other.Command != global::Command.KeepAlive) {
      Command = other.Command;
    }
    if (other.Sequence != 0UL) {
      Sequence = other.Sequence;
    }
    if (other.From != 0) {
      From = other.From;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Command = (global::Command) input.ReadEnum();
          break;
        }
        case 16: {
          Sequence = input.ReadUInt64();
          break;
        }
        case 24: {
          From = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Message : pb::IMessage<Message> {
  private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Message> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message(Message other) : this() {
    header_ = other.header_ != null ? other.header_.Clone() : null;
    buffer_ = other.buffer_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message Clone() {
    return new Message(this);
  }

  /// <summary>Field number for the "Header" field.</summary>
  public const int HeaderFieldNumber = 1;
  private global::MessageHeader header_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MessageHeader Header {
    get { return header_; }
    set {
      header_ = value;
    }
  }

  /// <summary>Field number for the "Buffer" field.</summary>
  public const int BufferFieldNumber = 2;
  private pb::ByteString buffer_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Buffer {
    get { return buffer_; }
    set {
      buffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Message);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Message other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Header, other.Header)) return false;
    if (Buffer != other.Buffer) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (header_ != null) hash ^= Header.GetHashCode();
    if (Buffer.Length != 0) hash ^= Buffer.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (header_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Header);
    }
    if (Buffer.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Buffer);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (header_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
    }
    if (Buffer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buffer);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Message other) {
    if (other == null) {
      return;
    }
    if (other.header_ != null) {
      if (header_ == null) {
        Header = new global::MessageHeader();
      }
      Header.MergeFrom(other.Header);
    }
    if (other.Buffer.Length != 0) {
      Buffer = other.Buffer;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (header_ == null) {
            Header = new global::MessageHeader();
          }
          input.ReadMessage(Header);
          break;
        }
        case 18: {
          Buffer = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class Package : pb::IMessage<Package> {
  private static readonly pb::MessageParser<Package> _parser = new pb::MessageParser<Package>(() => new Package());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Package> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Package() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Package(Package other) : this() {
    uniqueID_ = other.uniqueID_;
    from_ = other.from_;
    index_ = other.index_;
    total_ = other.total_;
    buffer_ = other.buffer_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Package Clone() {
    return new Package(this);
  }

  /// <summary>Field number for the "UniqueID" field.</summary>
  public const int UniqueIDFieldNumber = 1;
  private ulong uniqueID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong UniqueID {
    get { return uniqueID_; }
    set {
      uniqueID_ = value;
    }
  }

  /// <summary>Field number for the "From" field.</summary>
  public const int FromFieldNumber = 2;
  private int from_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int From {
    get { return from_; }
    set {
      from_ = value;
    }
  }

  /// <summary>Field number for the "Index" field.</summary>
  public const int IndexFieldNumber = 3;
  private int index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "Total" field.</summary>
  public const int TotalFieldNumber = 4;
  private int total_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Total {
    get { return total_; }
    set {
      total_ = value;
    }
  }

  /// <summary>Field number for the "Buffer" field.</summary>
  public const int BufferFieldNumber = 5;
  private pb::ByteString buffer_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Buffer {
    get { return buffer_; }
    set {
      buffer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Package);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Package other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UniqueID != other.UniqueID) return false;
    if (From != other.From) return false;
    if (Index != other.Index) return false;
    if (Total != other.Total) return false;
    if (Buffer != other.Buffer) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UniqueID != 0UL) hash ^= UniqueID.GetHashCode();
    if (From != 0) hash ^= From.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Total != 0) hash ^= Total.GetHashCode();
    if (Buffer.Length != 0) hash ^= Buffer.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UniqueID != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(UniqueID);
    }
    if (From != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(From);
    }
    if (Index != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Index);
    }
    if (Total != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Total);
    }
    if (Buffer.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(Buffer);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UniqueID != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UniqueID);
    }
    if (From != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (Total != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
    }
    if (Buffer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buffer);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Package other) {
    if (other == null) {
      return;
    }
    if (other.UniqueID != 0UL) {
      UniqueID = other.UniqueID;
    }
    if (other.From != 0) {
      From = other.From;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Total != 0) {
      Total = other.Total;
    }
    if (other.Buffer.Length != 0) {
      Buffer = other.Buffer;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UniqueID = input.ReadUInt64();
          break;
        }
        case 16: {
          From = input.ReadInt32();
          break;
        }
        case 24: {
          Index = input.ReadInt32();
          break;
        }
        case 32: {
          Total = input.ReadInt32();
          break;
        }
        case 42: {
          Buffer = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class KeepAlive : pb::IMessage<KeepAlive> {
  private static readonly pb::MessageParser<KeepAlive> _parser = new pb::MessageParser<KeepAlive>(() => new KeepAlive());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<KeepAlive> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepAlive() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepAlive(KeepAlive other) : this() {
    serverID_ = other.serverID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public KeepAlive Clone() {
    return new KeepAlive(this);
  }

  /// <summary>Field number for the "ServerID" field.</summary>
  public const int ServerIDFieldNumber = 1;
  private int serverID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ServerID {
    get { return serverID_; }
    set {
      serverID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as KeepAlive);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(KeepAlive other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ServerID != other.ServerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ServerID != 0) hash ^= ServerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ServerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ServerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ServerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(KeepAlive other) {
    if (other == null) {
      return;
    }
    if (other.ServerID != 0) {
      ServerID = other.ServerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ServerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
