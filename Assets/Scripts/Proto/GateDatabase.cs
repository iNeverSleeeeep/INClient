// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gate-database.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gate-database.proto</summary>
public static partial class GateDatabaseReflection {

  #region Descriptor
  /// <summary>File descriptor for gate-database.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GateDatabaseReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChNnYXRlLWRhdGFiYXNlLnByb3RvGhFkYXRhLnBsYXllci5wcm90bxoPZGF0",
          "YS5yb2xlLnByb3RvIiUKD0NyZWF0ZVBsYXllclJlcRISCgpQbGF5ZXJVVUlE",
          "GAEgASgJIiMKEENyZWF0ZVBsYXllclJlc3ASDwoHU3VjY2VzcxgBIAEoCCIj",
          "Cg1Mb2FkUGxheWVyUmVxEhIKClBsYXllclVVSUQYASABKAkiOgoOTG9hZFBs",
          "YXllclJlc3ASDwoHU3VjY2VzcxgBIAEoCBIXCgZQbGF5ZXIYAiABKAsyBy5Q",
          "bGF5ZXIiJgoQUmVsZWFzZVBsYXllck50ZhISCgpQbGF5ZXJVVUlEGAEgASgJ",
          "IkMKDUNyZWF0ZVJvbGVSZXESEgoKUGxheWVyVVVJRBgBIAEoCRIQCghSb2xl",
          "TmFtZRgCIAEoCRIMCgRab25lGAMgASgFIkEKDkNyZWF0ZVJvbGVSZXNwEg8K",
          "B1N1Y2Nlc3MYASABKAgSHgoEUm9sZRgCIAEoCzIQLlJvbGVTdW1tYXJ5RGF0",
          "YSIfCgtMb2FkUm9sZVJlcRIQCghSb2xlVVVJRBgBIAEoCSJWCgxMb2FkUm9s",
          "ZVJlc3ASDwoHU3VjY2VzcxgBIAEoCBIPCgdXb3JsZElEGAIgASgFEg8KB01h",
          "cFVVSUQYAyABKAkSEwoEUm9sZRgEIAEoCzIFLlJvbGVCGFoWSU5TZXJ2ZXIv",
          "c3JjL3Byb3RvL21zZ2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::DataPlayerReflection.Descriptor, global::DataRoleReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CreatePlayerReq), global::CreatePlayerReq.Parser, new[]{ "PlayerUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreatePlayerResp), global::CreatePlayerResp.Parser, new[]{ "Success" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoadPlayerReq), global::LoadPlayerReq.Parser, new[]{ "PlayerUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoadPlayerResp), global::LoadPlayerResp.Parser, new[]{ "Success", "Player" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReleasePlayerNtf), global::ReleasePlayerNtf.Parser, new[]{ "PlayerUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateRoleReq), global::CreateRoleReq.Parser, new[]{ "PlayerUUID", "RoleName", "Zone" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CreateRoleResp), global::CreateRoleResp.Parser, new[]{ "Success", "Role" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoadRoleReq), global::LoadRoleReq.Parser, new[]{ "RoleUUID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LoadRoleResp), global::LoadRoleResp.Parser, new[]{ "Success", "WorldID", "MapUUID", "Role" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class CreatePlayerReq : pb::IMessage<CreatePlayerReq> {
  private static readonly pb::MessageParser<CreatePlayerReq> _parser = new pb::MessageParser<CreatePlayerReq>(() => new CreatePlayerReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreatePlayerReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreatePlayerReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreatePlayerReq(CreatePlayerReq other) : this() {
    playerUUID_ = other.playerUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreatePlayerReq Clone() {
    return new CreatePlayerReq(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreatePlayerReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreatePlayerReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreatePlayerReq other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CreatePlayerResp : pb::IMessage<CreatePlayerResp> {
  private static readonly pb::MessageParser<CreatePlayerResp> _parser = new pb::MessageParser<CreatePlayerResp>(() => new CreatePlayerResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreatePlayerResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreatePlayerResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreatePlayerResp(CreatePlayerResp other) : this() {
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreatePlayerResp Clone() {
    return new CreatePlayerResp(this);
  }

  /// <summary>Field number for the "Success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreatePlayerResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreatePlayerResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreatePlayerResp other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class LoadPlayerReq : pb::IMessage<LoadPlayerReq> {
  private static readonly pb::MessageParser<LoadPlayerReq> _parser = new pb::MessageParser<LoadPlayerReq>(() => new LoadPlayerReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoadPlayerReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadPlayerReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadPlayerReq(LoadPlayerReq other) : this() {
    playerUUID_ = other.playerUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadPlayerReq Clone() {
    return new LoadPlayerReq(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoadPlayerReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoadPlayerReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoadPlayerReq other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LoadPlayerResp : pb::IMessage<LoadPlayerResp> {
  private static readonly pb::MessageParser<LoadPlayerResp> _parser = new pb::MessageParser<LoadPlayerResp>(() => new LoadPlayerResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoadPlayerResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadPlayerResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadPlayerResp(LoadPlayerResp other) : this() {
    success_ = other.success_;
    player_ = other.player_ != null ? other.player_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadPlayerResp Clone() {
    return new LoadPlayerResp(this);
  }

  /// <summary>Field number for the "Success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "Player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private global::Player player_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Player Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoadPlayerResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoadPlayerResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(Player, other.Player)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (player_ != null) hash ^= Player.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (player_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Player);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (player_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoadPlayerResp other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.player_ != null) {
      if (player_ == null) {
        Player = new global::Player();
      }
      Player.MergeFrom(other.Player);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (player_ == null) {
            Player = new global::Player();
          }
          input.ReadMessage(Player);
          break;
        }
      }
    }
  }

}

public sealed partial class ReleasePlayerNtf : pb::IMessage<ReleasePlayerNtf> {
  private static readonly pb::MessageParser<ReleasePlayerNtf> _parser = new pb::MessageParser<ReleasePlayerNtf>(() => new ReleasePlayerNtf());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReleasePlayerNtf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReleasePlayerNtf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReleasePlayerNtf(ReleasePlayerNtf other) : this() {
    playerUUID_ = other.playerUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReleasePlayerNtf Clone() {
    return new ReleasePlayerNtf(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReleasePlayerNtf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReleasePlayerNtf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReleasePlayerNtf other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CreateRoleReq : pb::IMessage<CreateRoleReq> {
  private static readonly pb::MessageParser<CreateRoleReq> _parser = new pb::MessageParser<CreateRoleReq>(() => new CreateRoleReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateRoleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateRoleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateRoleReq(CreateRoleReq other) : this() {
    playerUUID_ = other.playerUUID_;
    roleName_ = other.roleName_;
    zone_ = other.zone_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateRoleReq Clone() {
    return new CreateRoleReq(this);
  }

  /// <summary>Field number for the "PlayerUUID" field.</summary>
  public const int PlayerUUIDFieldNumber = 1;
  private string playerUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerUUID {
    get { return playerUUID_; }
    set {
      playerUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RoleName" field.</summary>
  public const int RoleNameFieldNumber = 2;
  private string roleName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoleName {
    get { return roleName_; }
    set {
      roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Zone" field.</summary>
  public const int ZoneFieldNumber = 3;
  private int zone_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Zone {
    get { return zone_; }
    set {
      zone_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateRoleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateRoleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerUUID != other.PlayerUUID) return false;
    if (RoleName != other.RoleName) return false;
    if (Zone != other.Zone) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerUUID.Length != 0) hash ^= PlayerUUID.GetHashCode();
    if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
    if (Zone != 0) hash ^= Zone.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PlayerUUID);
    }
    if (RoleName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RoleName);
    }
    if (Zone != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Zone);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerUUID);
    }
    if (RoleName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
    }
    if (Zone != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Zone);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateRoleReq other) {
    if (other == null) {
      return;
    }
    if (other.PlayerUUID.Length != 0) {
      PlayerUUID = other.PlayerUUID;
    }
    if (other.RoleName.Length != 0) {
      RoleName = other.RoleName;
    }
    if (other.Zone != 0) {
      Zone = other.Zone;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerUUID = input.ReadString();
          break;
        }
        case 18: {
          RoleName = input.ReadString();
          break;
        }
        case 24: {
          Zone = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CreateRoleResp : pb::IMessage<CreateRoleResp> {
  private static readonly pb::MessageParser<CreateRoleResp> _parser = new pb::MessageParser<CreateRoleResp>(() => new CreateRoleResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CreateRoleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateRoleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateRoleResp(CreateRoleResp other) : this() {
    success_ = other.success_;
    role_ = other.role_ != null ? other.role_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CreateRoleResp Clone() {
    return new CreateRoleResp(this);
  }

  /// <summary>Field number for the "Success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "Role" field.</summary>
  public const int RoleFieldNumber = 2;
  private global::RoleSummaryData role_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoleSummaryData Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CreateRoleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CreateRoleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (!object.Equals(Role, other.Role)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (role_ != null) hash ^= Role.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (role_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Role);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (role_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CreateRoleResp other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.role_ != null) {
      if (role_ == null) {
        Role = new global::RoleSummaryData();
      }
      Role.MergeFrom(other.Role);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 18: {
          if (role_ == null) {
            Role = new global::RoleSummaryData();
          }
          input.ReadMessage(Role);
          break;
        }
      }
    }
  }

}

public sealed partial class LoadRoleReq : pb::IMessage<LoadRoleReq> {
  private static readonly pb::MessageParser<LoadRoleReq> _parser = new pb::MessageParser<LoadRoleReq>(() => new LoadRoleReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoadRoleReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadRoleReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadRoleReq(LoadRoleReq other) : this() {
    roleUUID_ = other.roleUUID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadRoleReq Clone() {
    return new LoadRoleReq(this);
  }

  /// <summary>Field number for the "RoleUUID" field.</summary>
  public const int RoleUUIDFieldNumber = 1;
  private string roleUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoleUUID {
    get { return roleUUID_; }
    set {
      roleUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoadRoleReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoadRoleReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoleUUID != other.RoleUUID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoleUUID.Length != 0) hash ^= RoleUUID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoleUUID.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RoleUUID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoleUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleUUID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoadRoleReq other) {
    if (other == null) {
      return;
    }
    if (other.RoleUUID.Length != 0) {
      RoleUUID = other.RoleUUID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RoleUUID = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class LoadRoleResp : pb::IMessage<LoadRoleResp> {
  private static readonly pb::MessageParser<LoadRoleResp> _parser = new pb::MessageParser<LoadRoleResp>(() => new LoadRoleResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LoadRoleResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GateDatabaseReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadRoleResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadRoleResp(LoadRoleResp other) : this() {
    success_ = other.success_;
    worldID_ = other.worldID_;
    mapUUID_ = other.mapUUID_;
    role_ = other.role_ != null ? other.role_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LoadRoleResp Clone() {
    return new LoadRoleResp(this);
  }

  /// <summary>Field number for the "Success" field.</summary>
  public const int SuccessFieldNumber = 1;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  /// <summary>Field number for the "WorldID" field.</summary>
  public const int WorldIDFieldNumber = 2;
  private int worldID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WorldID {
    get { return worldID_; }
    set {
      worldID_ = value;
    }
  }

  /// <summary>Field number for the "MapUUID" field.</summary>
  public const int MapUUIDFieldNumber = 3;
  private string mapUUID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MapUUID {
    get { return mapUUID_; }
    set {
      mapUUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "Role" field.</summary>
  public const int RoleFieldNumber = 4;
  private global::Role role_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Role Role {
    get { return role_; }
    set {
      role_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LoadRoleResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LoadRoleResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Success != other.Success) return false;
    if (WorldID != other.WorldID) return false;
    if (MapUUID != other.MapUUID) return false;
    if (!object.Equals(Role, other.Role)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Success != false) hash ^= Success.GetHashCode();
    if (WorldID != 0) hash ^= WorldID.GetHashCode();
    if (MapUUID.Length != 0) hash ^= MapUUID.GetHashCode();
    if (role_ != null) hash ^= Role.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Success != false) {
      output.WriteRawTag(8);
      output.WriteBool(Success);
    }
    if (WorldID != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WorldID);
    }
    if (MapUUID.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MapUUID);
    }
    if (role_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Role);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Success != false) {
      size += 1 + 1;
    }
    if (WorldID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WorldID);
    }
    if (MapUUID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MapUUID);
    }
    if (role_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LoadRoleResp other) {
    if (other == null) {
      return;
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    if (other.WorldID != 0) {
      WorldID = other.WorldID;
    }
    if (other.MapUUID.Length != 0) {
      MapUUID = other.MapUUID;
    }
    if (other.role_ != null) {
      if (role_ == null) {
        Role = new global::Role();
      }
      Role.MergeFrom(other.Role);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Success = input.ReadBool();
          break;
        }
        case 16: {
          WorldID = input.ReadInt32();
          break;
        }
        case 26: {
          MapUUID = input.ReadString();
          break;
        }
        case 34: {
          if (role_ == null) {
            Role = new global::Role();
          }
          input.ReadMessage(Role);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
